{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  //https://code.visualstudio.com/docs/editor/tasks
  //https://code.visualstudio.com/docs/editor/tasks-appendix
  //https://jasonwatmore.com/post/2021/06/24/vs-code-net-debug-a-net-web-app-in-visual-studio-code
  //https://github.com/thehaseebahmed/vscode-dotnet-docker-debug
  //https://www.youtube.com/watch?v=k0hpant9wXo
  "tasks": [
    {
      "label": "build: catalogs",
      "command": "dotnet",
      "type": "process",
      "args": [
        "build",
        "${workspaceFolder}/src/Services/Catalogs/ECommerce.Services.Catalogs.Api/ECommerce.Services.Catalogs.Api.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    //https://stackoverflow.com/questions/59830506/how-to-setup-an-auto-watch-run-for-net-core-3-1-projects-using-visual-studio-co
    //https://jasonwatmore.com/post/2021/06/24/vs-code-net-debug-a-net-web-app-in-visual-studio-code
    //https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-watch
    {
      "label": "watch: catalogs",
      "command": "dotnet",
      "type": "process",
      //when we `run` app `dll`, inner `api project` working directory (will resolve to current working directory for app) that contains appsetings.json files or inner `bin directory` because when run app dll in this directory `app working directory` and `current working directory` will be set bin and because appsettings.json are there, so app can find this `appsettings.json` files in current working directory but if we run app dll outside this directories app current working directory will be changed, and it can't find `appsettings.json` files in current working directory, so we should explicitly specify working dir in `cwd`, this problem doesn't exist for `.csproj files` and their working dir always resolve `correctly` based on `api project`
      "args": [
        "watch",
        "--project",
        "${workspaceFolder}/src/Services/Catalogs/ECommerce.Services.Catalogs.Api/ECommerce.Services.Catalogs.Api.csproj"
      ],
      "options": {
        "cwd": "${workspaceFolder}/src/Services/Catalogs/ECommerce.Services.Catalogs.Api"
      },
      "linux": {
        "options": {
          "env": {
            // The FileSystemWatcher used by default wasnt working for me on linux, so I switched to the polling watcher.
            "DOTNET_USE_POLLING_FILE_WATCHER": "true"
          }
        }
      },
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": {
        "kind": "build"
      },
    },
    //https://github.com/microsoft/vscode-docker/issues/3831
    //https://docs.docker.com/engine/reference/commandline/build/#target
    // this task only build target stage here `final`, and we will change the entrypoint in 'ducker run' (we change entrypoint only in debug mode) with --entrypoint because we don't want our contaoner runs we will run our cotainer in debug mode with launching app from docker container remotly
    {
      "label": "docker-build: catalogs",
      "command": "docker build --target final -f ${workspaceFolder}/src/Services/Catalogs/Dockerfile --tag catalogs:dev ${workspaceFolder}", //--no-cache
      "type": "shell",
      "dependsOn": [
        "build: catalogs"
      ],
      "problemMatcher": []
    },
    {
      "label": "docker-build-base: catalogs",
      "command": "docker build --target base -f ${workspaceFolder}/src/Services/Catalogs/Dockerfile --tag catalogs:base ${workspaceFolder}",
      "type": "shell",
      "dependsOn": [
        "build: catalogs"
      ],
      "problemMatcher": []
    },
    // for see data inner container `docker exec -it catalogs-debug`
    {
      "label": "docker-run-debug: catalogs",
      //https://www.aaron-powell.com/posts/2019-04-04-debugging-dotnet-in-docker-with-vscode/
      //https://www.powercms.in/article/how-automatically-delete-docker-container-after-running-it
      //https://www.richard-banks.org/2018/07/debugging-core-in-docker.html
      //https://docs.docker.com/engine/reference/commandline/run/#mount
      //https://oprea.rocks/blog/how-to-properly-override-the-entrypoint-using-docker-run
      //https://docs.docker.com/engine/reference/run/#entrypoint-default-command-to-execute-at-runtime
      //https://github.com/microsoft/vscode-docker/issues/3831#issuecomment-1433567030
      //https://stackoverflow.com/questions/52070171/whats-the-default-user-for-docker-exec
      //https://code.visualstudio.com/docs/containers/troubleshooting#_running-as-a-nonroot-user
      // here if we don't use detached mode this task block process for inreactive mode and prevent to use launch debuger in laucnch.json
      //--rm doesn't work in detached mode
      //here we use full build image for debugging but we change dcoker file `entrypoint` durring `docker run` for for preventing launch app in docker container but with using new entrypoint our stage will run on app working directory and then in our launch.json we launch our app inner container with connecting to `catalogs-debug` container with `pipeTransport` and `vsdbg` (internaly use dcoker exec and run vsdb on container) and then with using coreclr type and prgram to run, it will run this program with `dotnet run` by coreclr and passed `args` 
      //mappings increase the size of docker image so we use it just in debug mode, in prod its better dockerfile restore just nugets it needs for decresing image size
      "command": "docker run -it --rm -d --publish '4000:80' --publish-all --name catalogs-debug --entrypoint 'bash' --network=ecommerce --mount type=bind,src=${env:USERPROFILE}\\vsdbg,dst=/vsdbg --mount type=bind,source=${env:USERPROFILE}\\.nuget\\packages,destination=/root/.nuget/packages,readonly --mount type=bind,source=${env:USERPROFILE}\\.nuget\\packages,destination=/home/appuser/.nuget/packages,readonly catalogs:dev",
      "dependsOn": [
        "docker-build: catalogs"
      ],
      "type": "shell",
      "problemMatcher": []
    },
    // for see data inner container `docker exec -it catalogs-dev bash`
    {
      "label": "docker-run: catalogs",
      //https://www.aaron-powell.com/posts/2019-04-04-debugging-dotnet-in-docker-with-vscode/
      //https://www.powercms.in/article/how-automatically-delete-docker-container-after-running-it
      //https://www.richard-banks.org/2018/07/debugging-core-in-docker.html
      //https://docs.docker.com/engine/reference/commandline/run/#mount
      //https://stackoverflow.com/questions/52070171/whats-the-default-user-for-docker-exec
      //https://code.visualstudio.com/docs/containers/troubleshooting#_running-as-a-nonroot-user
      // here if we don't use detached mode this task block process for inreactive mode and prevent to use launch debuger in laucnch.json
      //--rm doesn't work in detached mode
      //mappings increase the size of docker image so we use it just in debug mode, in prod its better dockerfile restore just nugets it needs for decresing image size
      "command": "docker run -it --rm --publish '4000:80' --publish-all --network=ecommerce --name catalogs-dev --mount type=bind,src=${env:USERPROFILE}\\vsdbg,dst=/vsdbg catalogs:dev",
      "dependsOn": [
        "docker-build: catalogs"
      ],
      "type": "shell",
      "problemMatcher": []
    },
    {
      "label": "docker-run-base: catalogs",
      //https://www.aaron-powell.com/posts/2019-04-04-debugging-dotnet-in-docker-with-vscode/
      //https://www.powercms.in/article/how-automatically-delete-docker-container-after-running-it
      //https://www.richard-banks.org/2018/07/debugging-core-in-docker.html
      //https://docs.docker.com/engine/reference/commandline/run/#mount
      //https://stackoverflow.com/questions/52070171/whats-the-default-user-for-docker-exec
      //https://code.visualstudio.com/docs/containers/troubleshooting#_running-as-a-nonroot-user
      // here if we don't use detached mode this task block process for inreactive mode and prevent to use launch debuger in laucnch.json
      //--rm doesn't work in detached mode
      //mappings increase the size of docker image so we use it just in debug mode, in prod its better dockerfile restore just nugets it needs for decresing image size
      //because we use `base` image directly for running app, and we don't have any source code and nuggets and entrypoint (so our container not be launch) in base layer we should map source code and vsdbg as a volume or using in launch time in launch.json on base layer. In launch.json app will run with `pipeTransport` and type `coreclr` and after connecting to base layer container with running vsdb on the container and then coreclr will launch specified `program` with `dotnet run` on the container and pass `args` to `dotnet run` as launch program (nugget path, ... as --additionalProbingPath because our dll is in debug build and need to resolve all nugget dependecies that doesn't exist in this build).
      "command": "docker run -it --rm -d --publish '4000:80' --publish-all --network=ecommerce --name catalogs-base --mount type=bind,src=${workspaceRoot},dst=/app --mount type=bind,src=${env:USERPROFILE}\\vsdbg,dst=/vsdbg --mount type=bind,source=${env:USERPROFILE}\\.nuget\\packages,destination=/root/.nuget/packages,readonly --mount type=bind,source=${env:USERPROFILE}\\.nuget\\packages,destination=/home/appuser/.nuget/packages,readonly catalogs:base",
      "dependsOn": [
        "docker-build-base: catalogs"
      ],
      "type": "shell",
      "problemMatcher": []
    },
    {
      "label": "docker-remove-base: catalogs",
      "command": "docker container rm catalogs-base --force",
      "type": "shell",
      "problemMatcher": []
    },
    {
      "label": "docker-remove-debug: catalogs",
      "command": "docker container rm catalogs-debug --force",
      "type": "shell",
      "problemMatcher": []
    },
    {
      "label": "unit test: catalogs service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "${workspaceFolder}/tests/Services/Catalogs/ECommerce.Services.Catalogs.UnitTests/ECommerce.Services.Catalogs.UnitTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "integrtion test: catalogs service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "${workspaceFolder}/src/Services/Catalogs/ECommerce.Services.Catalogs.IntegrationTests/ECommerce.Services.Catalogs.IntegrationTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "end-to-end test: catalogs service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "${workspaceFolder}/src/Services/Catalogs/ECommerce.Services.Catalogs.EndToEndTests/ECommerce.Services.Catalogs.EndToEndTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "build: customers service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "build",
        "${workspaceFolder}/src/Services/Customers/ECommerce.Services.Customers.Api/ECommerce.Services.Customers.Api.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    //https://stackoverflow.com/questions/59830506/how-to-setup-an-auto-watch-run-for-net-core-3-1-projects-using-visual-studio-co
    //https://jasonwatmore.com/post/2021/06/24/vs-code-net-debug-a-net-web-app-in-visual-studio-code
    {
      "label": "watch: customers service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "watch"
      ],
      "options": {
        "cwd": "${workspaceFolder}/src/Services/Customers/ECommerce.Services.Customers.Api/"
      },
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "unit test: customers service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "${workspaceFolder}/tests/Services/Customers/ECommerce.Services.Customers.UnitTests/ECommerce.Services.Customers.UnitTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "integrtion test: customers service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "${workspaceFolder}/src/Services/Customers/ECommerce.Services.Customers.IntegrationTests/ECommerce.Services.Customers.IntegrationTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "end-to-end test: customers service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "${workspaceFolder}/src/Services/Customers/ECommerce.Services.Customers.EndToEndTests/ECommerce.Services.Customers.EndToEndTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "build: identity service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "build",
        "${workspaceFolder}/src/Services/Identity/ECommerce.Services.Identity.Api/ECommerce.Services.Identity.Api.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    //https://stackoverflow.com/questions/59830506/how-to-setup-an-auto-watch-run-for-net-core-3-1-projects-using-visual-studio-co
    //https://jasonwatmore.com/post/2021/06/24/vs-code-net-debug-a-net-web-app-in-visual-studio-code
    {
      "label": "watch: identity service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "watch"
      ],
      "options": {
        "cwd": "${workspaceFolder}/src/Services/Identity/ECommerce.Services.Identity.Api/"
      },
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": {
        "kind": "build"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "unit test: identity service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "${workspaceFolder}/tests/Services/Identity/ECommerce.Services.Identity.UnitTests/ECommerce.Services.Identity.UnitTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "integrtion test: identity service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "${workspaceFolder}/src/Services/Identity/ECommerce.Services.Identity.IntegrationTests/ECommerce.Services.Identity.IntegrationTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "end-to-end test: identity service",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "${workspaceFolder}/src/Services/Identity/ECommerce.Services.Identity.EndToEndTests/ECommerce.Services.Identity.EndToEndTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      //https://code.visualstudio.com/docs/editor/tasks-appendix
      //https://code.visualstudio.com/docs/editor/tasks#_custom-tasks
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "docker-compose: build infrastructures",
      "type": "shell",
      // https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files
      // https://docs.docker.com/compose/extends/
      "command": "docker-compose -f docker-compose.infrastructure.yaml build",
    },
    {
      "label": "docker-compose: up infrastructures",
      "type": "shell",
      // https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files
      // https://docs.docker.com/compose/extends/
      "command": "docker-compose -f docker-compose.infrastructure.yaml up -d",
    },
    //https://code.visualstudio.com/docs/containers/reference#_docker-compose-task
    {
      "label": "docker-compose: down infrastructures",
      "type": "shell",
      // https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files
      // https://docs.docker.com/compose/extends/
      "command": "docker-compose -f docker-compose.infrastructure.yaml down -d",
    },
    //https://www.richard-banks.org/2018/07/debugging-core-in-docker.html
    {
      "label": "docker-compose: prod build services",
      "type": "shell",
      // https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files
      // https://docs.docker.com/compose/extends/
      "command": "docker-compose -f docker-compose.services.yaml -f docker-compose.override.yaml build",
    },
    //https://www.richard-banks.org/2018/07/debugging-core-in-docker.htmlk
    {
      "label": "docker-compose: prod up services",
      "dependsOn": [
        "docker-compose: up infrastructures"
      ],
      "type": "shell",
      // https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files
      // https://docs.docker.com/compose/extends/
      "command": "docker-compose -f  docker-compose.services.yaml -f docker-compose.override.yaml up -d",
    },
    //https://www.richard-banks.org/2018/07/debugging-core-in-docker.html
    {
      "label": "docker-compose: prod down services",
      "type": "shell",
      // https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files
      // https://docs.docker.com/compose/extends/
      "command": "docker-compose -f docker-compose.services.yaml -f docker-compose.override.yaml down -d",
    },
    {
      "label": "docker-compose: dev build services",
      "type": "shell",
      // https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files
      // https://docs.docker.com/compose/extends/
      "command": "docker-compose -f docker-compose.services.yaml -f docker-compose.override.yaml -f docker-compose.services.dev.yaml build",
    },
    {
      "label": "docker-compose: dev up services",
      "type": "shell",
      // https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files
      // https://docs.docker.com/compose/extends/
      "command": "docker-compose -f docker-compose.services.yaml -f docker-compose.override.yaml -f docker-compose.services.dev.yaml up -d",
    },
    {
      "label": "docker-compose: dev down services",
      "type": "shell",
      // https://docs.docker.com/compose/reference/#use--f-to-specify-name-and-path-of-one-or-more-compose-files
      // https://docs.docker.com/compose/extends/
      "command": "docker-compose -f docker-compose.services.yaml -f docker-compose.override.yaml -f docker-compose.services.dev.yaml down -d",
    },
    {
      "type": "npm",
      "script": "prepare",
      "problemMatcher": [],
      "label": "npm: prepare",
      "detail": "husky install && dotnet tool restore"
    },
    {
      "type": "npm",
      "script": "install",
      "problemMatcher": [],
      "label": "npm: install dependencies",
      "detail": "install dependencies from package"
    }
  ]
}