# https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
# https://doug.sh/posts/using-composite-actions-with-github-actions/
# https://wallis.dev/blog/composite-github-actions

name: "Generate Semantic Release Note"
description: "Generating semantic release note for our application"

# Input parameters allow you to specify data that the action expects to use during runtime. GitHub stores input parameters as environment variables.(so they are just string)
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs
inputs:
  # https://stackoverflow.com/questions/70098241/using-secrets-in-composite-actions-github
  token:
    description: 'A Github PAT'
    required: true

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputsoutput_idvalue
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
outputs:
  application-version:
    value: ${{ steps.app-version-step.outputs.app-version }}
    description: "Application Version"

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: "composite"
  steps:

    # https://github.com/actions/download-artifact#download-all-artifacts
    # download all artifacts for adding to release-notes with using 'semantic-release/github'
    - name: Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    # https://thecodinganalyst.github.io/knowledgebase/Basic-guide-to-Semantic-Release/
    # https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b
    # https://gist.github.com/ujlbu4/15a305f2e53cb487c39c9484e660903a
    # https://github.com/semantic-release/semantic-release/issues/753#issuecomment-706971174
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
    # https://github.com/semantic-release/semantic-release/issues/2704
    # https://github.com/semantic-release/semantic-release/issues/2703
    # 'reference already exists' error when pushing tag: https://semantic-release.gitbook.io/semantic-release/support/troubleshooting#reference-already-exists-error-when-pushing-tag
    # https://github.com/cycjimmy/semantic-release-action
    # cycjimmy internally uses exported semantic release module here: https://github.com/semantic-release/semantic-release/blob/b9b5c7689f0acdfdc079c839db0fcf78339745e2/index.js#L256
    - name: Semantic Release Publish
      id: semantic
      shell: bash
      if: success()
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GIT_AUTHOR_NAME: github-actions[bot]
        GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions[bot]
        GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
      # because of using none default (conventionalcommits) `preset` for `semantic-release`, we should add dependency `conventional-changelog-conventionalcommits`
      # using dry-run here for preventing publish release note and just calculate version, for develop and devops/ci we don't want to publish release
      run: |
        echo "running semantic-release in release mode"
        npx -p conventional-changelog-conventionalcommits -p @semantic-release/git -p @semantic-release/changelog -p @semantic-release/exec -p @saithodev/semantic-release-backmerge  semantic-release

      # https://stackoverflow.com/questions/69043259/how-can-i-cancel-a-github-actions-workflow-if-the-commit-has-no-tag
    - name: Semantic Release Outputs
      shell: bash
      run: |
            echo ${{ steps.semantic.outputs.semantic_nextRelease_version }}
            echo ${{ steps.semantic.outputs.semantic_nextRelease_channel }}
            echo ${{ steps.semantic.outputs.semantic_nextRelease_gitTag }}
            echo ${{ steps.semantic.outputs.semantic_lastRelease_version }}
            echo ${{ steps.semantic.outputs.semantic_lastRelease_channel }}
            echo ${{ steps.semantic.outputs.semantic_lastRelease_gitTag }}

    - name: Set Application Version
      id: app-version-step
      shell: bash
      if: success()
      # https://gist.github.com/rponte/fdc0724dd984088606b0
      # https://linuxhint.com/bash_if_else_examples/
      # https://github.com/semantic-release/semantic-release/issues/2703
      run: |
        if [ -z "${{ steps.semantic-version.outputs.semantic_nextRelease_version }}" ]; then
            if [ "${{ github.ref_name }}" = "develop" ]; then
               LATEST_TAG=$(git describe --abbrev=0 --tags --match "*dev*" | sed 's/^v//')
            elif [ "${{ github.ref_name }}" = "beta" ]; then
               LATEST_TAG=$(git describe --abbrev=0 --tags --match "*beta*" | sed 's/^v//')
            elif [ "${{ github.ref_name }}" = "preview" ]; then
               LATEST_TAG=$(git describe --abbrev=0 --tags --match "*preview*" | sed 's/^v//')
            else
               LATEST_TAG=$(git describe --abbrev=0 --tags --exclude "*dev*" --exclude "*beta*" --exclude "*preview*" --exclude "*ops*" | sed 's/^v//')
            fi
            echo "semantic_nextRelease_version is empty, so we get last tag for branch ${{ github.ref_name }}"
            echo "latest tag is: $LATEST_TAG"
            echo "app-version=$LATEST_TAG" >> "$GITHUB_OUTPUT"
        else
            echo "app-version=${{ steps.semantic-version.outputs.semantic_nextRelease_version }}" >> "$GITHUB_OUTPUT"
        fi
        echo "app version is: ${{ steps.app-version-step.outputs.app-version }}"
